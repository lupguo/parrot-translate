// Code generated by MockGen. DO NOT EDIT.
// Source: ./cache.go

// Package rdshand is a generated GoMock package.
package rdshand

import (
	context "context"
	v8 "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockIRedisHand is a mock of IRedisHand interface
type MockIRedisHand struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisHandMockRecorder
}

// MockIRedisHandMockRecorder is the mock recorder for MockIRedisHand
type MockIRedisHandMockRecorder struct {
	mock *MockIRedisHand
}

// NewMockIRedisHand creates a new mock instance
func NewMockIRedisHand(ctrl *gomock.Controller) *MockIRedisHand {
	mock := &MockIRedisHand{ctrl: ctrl}
	mock.recorder = &MockIRedisHandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRedisHand) EXPECT() *MockIRedisHandMockRecorder {
	return m.recorder
}

// GetClient mocks base method
func (m *MockIRedisHand) GetClient() *v8.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*v8.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient
func (mr *MockIRedisHandMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockIRedisHand)(nil).GetClient))
}

// PipeWrite mocks base method
func (m *MockIRedisHand) PipeWrite(ctx context.Context, objs []interface{}, kfn KeyFunc, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipeWrite", ctx, objs, kfn, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// PipeWrite indicates an expected call of PipeWrite
func (mr *MockIRedisHandMockRecorder) PipeWrite(ctx, objs, kfn, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipeWrite", reflect.TypeOf((*MockIRedisHand)(nil).PipeWrite), ctx, objs, kfn, ttl)
}

// PipeRead mocks base method
func (m *MockIRedisHand) PipeRead(ctx context.Context, keys []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipeRead", ctx, keys)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipeRead indicates an expected call of PipeRead
func (mr *MockIRedisHandMockRecorder) PipeRead(ctx, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipeRead", reflect.TypeOf((*MockIRedisHand)(nil).PipeRead), ctx, keys)
}

// GetString mocks base method
func (m *MockIRedisHand) GetString(ctx context.Context, keyFormat string, injects ...interface{}) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, keyFormat}
	for _, a := range injects {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetString", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetString indicates an expected call of GetString
func (mr *MockIRedisHandMockRecorder) GetString(ctx, keyFormat interface{}, injects ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, keyFormat}, injects...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockIRedisHand)(nil).GetString), varargs...)
}

// DelKeys mocks base method
func (m *MockIRedisHand) DelKeys(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelKeys", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelKeys indicates an expected call of DelKeys
func (mr *MockIRedisHandMockRecorder) DelKeys(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelKeys", reflect.TypeOf((*MockIRedisHand)(nil).DelKeys), varargs...)
}
